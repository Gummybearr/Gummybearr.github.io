{"version":3,"sources":["Login.js","App.js","serviceWorker.js","index.js"],"names":["Login","login","auth2","signIn","then","googleUser","profile","getBasicProfile","console","log","getAuthResponse","id_token","getId","getName","getImageUrl","getEmail","setState","token","logout","disconnect","googleSDK","window","load","init","client_id","cookiepolicy","scope","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","state","this","className","onClick","ref","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAgFeA,E,kDA5EX,aAAe,IAAD,8BACV,gBAQJC,MAAQ,WACJ,EAAKC,MAAMC,SAASC,MAAK,SAAAC,GACrB,IAAIC,EAAUD,EAAWE,kBACzBC,QAAQC,IAAI,YAAcJ,EAAWK,kBAAkBC,UACvDH,QAAQC,IAAI,OAASH,EAAQM,SAC7BJ,QAAQC,IAAI,SAAWH,EAAQO,WAC/BL,QAAQC,IAAI,cAAgBH,EAAQQ,eACpCN,QAAQC,IAAI,UAAYH,EAAQS,YAEhC,EAAKC,SAAS,CAAEC,MAAOZ,EAAWK,kBAAkBC,eAlB9C,EAuBdO,OAAS,WACL,EAAKF,SAAS,CAAEC,MAAO,KACvB,EAAKf,MAAMiB,cAzBD,EA4BdC,UAAY,WAERC,OAAM,gBAAsB,WACxBA,OAAM,KAASC,KAAK,SAAS,WAGzB,EAAKpB,MAAQmB,OAAM,KAASnB,MAAMqB,KAAK,CACnCC,UAAW,2EACXC,aAAc,qBACdC,MAAO,0DAOlB,SAAUC,EAAGC,EAAGC,GACb,IAAIC,EAAIC,EAAMJ,EAAEK,qBAAqBJ,GAAG,GACpCD,EAAEM,eAAeJ,MACrBC,EAAKH,EAAEO,cAAcN,IAAOC,GAAKA,EACjCC,EAAGK,IAAM,gEACTJ,EAAIK,WAAWC,aAAaP,EAAIC,IALnC,CAMCO,SAAU,SAAU,iBAhDtB,EAAKC,MAAQ,CAAEtB,MAAO,IAFZ,E,gEAOVuB,KAAKpB,c,+BA+CL,OACI,yBAAKqB,UAAU,YACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,qBACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,yBACVD,KAAKD,MAAMtB,MACR,4BAAQwB,UAAU,6BAA6BC,QAASF,KAAKtB,QAA7D,UACA,4BAAQuB,UAAU,4BAA4BC,QAASF,KAAKvC,MAAO0C,IAAI,IAAvE,+B,GAlEpBC,aCULC,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCKcK,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASL,eAAe,SDyHpB,kBAAmBoB,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.0b777684.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = { token: '' };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.googleSDK();\r\n    }\r\n    login = () => {\r\n        this.auth2.signIn().then(googleUser => {\r\n            let profile = googleUser.getBasicProfile();\r\n            console.log('Token || ' + googleUser.getAuthResponse().id_token);\r\n            console.log('ID: ' + profile.getId());\r\n            console.log('Name: ' + profile.getName());\r\n            console.log('Image URL: ' + profile.getImageUrl());\r\n            console.log('Email: ' + profile.getEmail());\r\n\r\n            this.setState({ token: googleUser.getAuthResponse().id_token });\r\n        });\r\n    }\r\n\r\n\r\n    logout = () => {\r\n        this.setState({ token: '' });\r\n        this.auth2.disconnect();\r\n    }\r\n\r\n    googleSDK = () => {\r\n        // #3 platform.js 스크립트 로드 후 gapi.auth2.init 함수 호출 및 로그인 버튼 기능 활성화\r\n        window['googleSDKLoaded'] = () => {\r\n            window['gapi'].load('auth2', () => {\r\n                // https://developers.google.com/identity/sign-in/web/reference#gapiauth2initparams\r\n                // https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\r\n                this.auth2 = window['gapi'].auth2.init({\r\n                    client_id: '982814404467-v0kr7dla3rb75frni8kpq9tg71eug2ti.apps.googleusercontent.com',\r\n                    cookiepolicy: 'single_host_origin',\r\n                    scope: 'https://www.googleapis.com/auth/contacts.readonly',\r\n                });\r\n            });\r\n        }\r\n\r\n        // #2 <script id=\"google-jssdk\" src=\"https://.../platform.js?onload=googleSDKLoaded\"></script> 태그를 문서에 추가\r\n        //    스크립트 코드가 로드되면 googleSDKLoaded 호출\r\n        (function (d, s, id) {\r\n            var js, fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) { return; }\r\n            js = d.createElement(s); js.id = id;\r\n            js.src = \"https://apis.google.com/js/platform.js?onload=googleSDKLoaded\";\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n        }(document, 'script', 'google-jssdk'));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-12\">\r\n                    <h2 className=\"text-left\">Google Login Demo</h2>\r\n                    <div className=\"card mt-3\">\r\n                        <div className=\"card-body\">\r\n                            <div className=\"row mt-5 mb-5\">\r\n                                <div className=\"col-md-4 mt-2 m-auto \">\r\n                                    {this.state.token ?\r\n                                        <button className=\"logoutBtn loginBtn--google\" onClick={this.logout}>Logout</button> :\r\n                                        <button className=\"loginBtn loginBtn--google\" onClick={this.login} ref=\"\">Login with Google</button>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport Login from './Login.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Login />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}